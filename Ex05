Here's an implementation of the `ft_sqrt` function that returns the square root of a number if it exists, or 0 if the square root is an irrational number:

```c
int ft_sqrt(int nb)
{
    int i = 1;
    
    while (i * i <= nb)
    {
        if (i * i == nb)
            return i;
        
        i++;
    }
    
    return 0;
}
```

In this implementation, the `ft_sqrt` function takes an integer `nb` as a parameter and returns the square root of `nb` if it exists as an integer. If the square root is an irrational number, the function returns 0.

The function uses a simple approach to find the square root. It iteratively checks if the square of `i` is equal to `nb` by incrementing `i` starting from 1. If the square of `i` is found to be equal to `nb`, `i` is the square root and is returned.

If the loop finishes without finding a perfect square (i.e., `i * i` becomes greater than `nb`), it means the square root does not exist as an integer, and the function returns 0.

Please note that this implementation may not handle floating-point square roots or handle cases where the square root exceeds the range of an integer.
