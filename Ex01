Files to turn in : ft_recursive_factorial.c
Allowed functions : None

• Create a recursive function that returns the factorial of the number given as a
parameter.
• If the argument is not valid the function should return 0.
• Overflows must not be handled, the function return will be undefined.
• Here’s how it should be prototyped :
int ft_recursive_factorial(int nb);

Here's an implementation of the `ft_recursive_factorial` function that calculates the factorial of a given number using recursion:

```c
int ft_recursive_factorial(int nb)
{
    if (nb < 0)
        return 0;

    if (nb == 0 || nb == 1)
        return 1;

    return nb * ft_recursive_factorial(nb - 1);
}
```

In this implementation, the `ft_recursive_factorial` function takes an integer `nb` as a parameter and calculates its factorial recursively.

If the input `nb` is negative, the function returns 0 because factorials are not defined for negative numbers.

If `nb` is 0 or 1, the base case of the recursion is reached, and the function returns 1.

For any other positive value of `nb`, the function recursively calls itself with `nb - 1` and multiplies the result by `nb`. This process continues until the base case is reached.

Finally, the calculated factorial value is returned.

Please note that this implementation does not handle overflow cases, and the return value will be undefined if the factorial exceeds the range of an integer.
