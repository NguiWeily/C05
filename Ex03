Files to turn in : ft_recursive_power.c
Allowed functions : None

• Create a recursive function that returns the value of a power applied to a number.
• Overflows must not be handled, the function return will be undefined.
• We’ve decided that 0 power 0 will returns 1
• Here’s how it should be prototyped :
int ft_recursive_power(int nb, int power);

Here's an implementation of the `ft_recursive_power` function that calculates the value of a number raised to a given power using recursion:

```c
int ft_recursive_power(int nb, int power)
{
    if (power < 0)
        return 0;
    
    if (power == 0)
        return 1;
    
    return nb * ft_recursive_power(nb, power - 1);
}
```

In this implementation, the `ft_recursive_power` function takes two integers as parameters: `nb` and `power`. It calculates the value of `nb` raised to the power of `power` recursively.

If the power is less than 0, the function returns 0 because negative powers are not supported.

If the power is 0, the function returns 1 because any number raised to the power of 0 is 1.

For other positive powers, the function recursively multiplies `nb` by the result of `ft_recursive_power(nb, power - 1)`.

The recursion continues until the power becomes 0, at which point the final result is returned.

Please note that this implementation does not handle overflow cases, and the return value will be undefined if the result exceeds the range of an integer. Also, according to the specification, 0 raised to the power of 0 is considered to be 1.
