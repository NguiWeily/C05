Files to turn in : ft_fibonacci.c
Allowed functions : None

• Create a function ft_fibonacci that returns the n-th element of the Fibonacci
sequence, the first element being at the 0 index. We’ll consider that the Fibonacci
sequence starts like this: 0, 1, 1, 2.
• Overflows must not be handled, the function return will be undefined.
• Here’s how it should be prototyped :
int ft_fibonacci(int index);

• Obviously, ft_fibonacci has to be recursive.
• If the index is less than 0, the function should return -1.

Here's an implementation of the `ft_fibonacci` function that returns the n-th element of the Fibonacci sequence recursively:

```c
int ft_fibonacci(int index)
{
    if (index < 0)
        return -1;
    
    if (index == 0)
        return 0;
    
    if (index == 1 || index == 2)
        return 1;
    
    return ft_fibonacci(index - 1) + ft_fibonacci(index - 2);
}
```

In this implementation, the `ft_fibonacci` function takes an integer `index` as a parameter and returns the corresponding element in the Fibonacci sequence.

If the `index` is less than 0, the function returns -1 as specified.

If the `index` is 0, the function returns 0 because the Fibonacci sequence starts with 0 as the first element.

If the `index` is 1 or 2, the function returns 1 because the second and third elements in the Fibonacci sequence are both 1.

For other positive indices, the function recursively calculates the sum of the previous two elements in the sequence, i.e., `ft_fibonacci(index - 1) + ft_fibonacci(index - 2)`.

The recursion continues until the base cases (index = 0, 1, or 2) are reached, at which point the final result is returned.

Please note that this implementation does not handle overflow cases, and the return value will be undefined if the result exceeds the range of an integer.
